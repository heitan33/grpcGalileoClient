package main

import (
	"google.golang.org/grpc"
	"log"
	pb "proto"
	"os"
	"context"
	"fmt"
)

const (
	address = "localhost:50051"
	defaultName = "郭璞"
)

func serverState() {
	var c conf
	conf := c.getConf()
	var discReadFloat, discWriteFloat, memoryUsageRateFloat2, cpuUsageRate, load, bandwidthUpload, bandwidthDownload, iopsReadFloat, iopsWriteFloat float64
	var stat SystemInfo
	var memInt int64
	var resourceInfo string
	stat.Commandline = "sar -u 1 1|sed -n '4p'|awk '{print $NF}'"
	cpuStr := stat.getSysInfo()
	cpuStr = strings.Replace(cpuStr, "\n", "", -1)
	cpuFloat, _ := strconv.ParseFloat(cpuStr, 64)
	cpuUsageRate = 100 - cpuFloat
	cpuUsageRate, _ = strconv.ParseFloat(fmt.Sprintf("%.2f", cpuUsageRate), 64)
	log.Println(reflect.TypeOf(cpuUsageRate))
	stat.Commandline = "free -m|grep 'available'"
	memStr := stat.getSysInfo()
	if len(memStr) == 0 {
		stat.Commandline = "free -m|grep -w 'cache'|awk '{print $NF}'"
		memStr = stat.getSysInfo()
		log.Println(memStr)
		log.Println(reflect.TypeOf(memStr))
		memStr = strings.Replace(memStr, "\n", "", -1)
		memInt, _ = strconv.ParseInt(memStr, 10, 64)
	} else {
		stat.Commandline = "free -m|sed -n '2p'|awk '{print $NF}'"
		memStr = stat.getSysInfo()
		memStr = strings.Replace(memStr, "\n", "", -1)
		memInt, _ = strconv.ParseInt(memStr, 10, 64)
	}

	stat.Commandline = "free -m|grep -i 'mem'|awk '{print $2}'"
	memTotalStr := stat.getSysInfo()
	memTotalStr = strings.Replace(memTotalStr, "\n", "", -1)
	memTotalInt, _ := strconv.ParseInt(memTotalStr, 10, 64)
	log.Println(float64(memTotalInt), float64(memInt), float64(memTotalInt))
	memoryUsageRateFloat := float64((float64(memTotalInt)-float64(memInt))/float64(memTotalInt)) * 100
	log.Println(reflect.TypeOf(memoryUsageRateFloat))
	log.Println(memoryUsageRateFloat)
	memoryUsageRateFloat2, _ = strconv.ParseFloat(fmt.Sprintf("%.2f", memoryUsageRateFloat), 64)

	stat.Commandline = "uptime|awk -F, '{print $(NF-1)}'"
	cpuLoadStr := stat.getSysInfo()
	log.Println(cpuLoadStr)
	cpuLoadStr = strings.Replace(cpuLoadStr, "\n", "", -1)
	cpuLoadStr = strings.Trim(cpuLoadStr, " ")
	cpuLoadFloat, _ := strconv.ParseFloat(cpuLoadStr, 64)
	log.Println(reflect.TypeOf(cpuLoadFloat))
	log.Println(cpuLoadFloat)

	stat.Commandline = "grep 'model name' /proc/cpuinfo | wc -l"
	cpuCoreCountStr := stat.getSysInfo()
	cpuCoreCountStr = strings.Replace(cpuCoreCountStr, "\n", "", -1)
	cpuCoreCountStr = strings.Trim(cpuCoreCountStr, " ")
	cpuCoreCountFloat, _ := strconv.ParseFloat(cpuCoreCountStr, 64)
	loadFloat := cpuLoadFloat / cpuCoreCountFloat * 100
	load, _ = strconv.ParseFloat(fmt.Sprintf("%.2f", loadFloat), 64)
	log.Println(load)

	stat.Commandline = "ss -nt|grep -i 'est'|wc -l"
	deviceLinkingCountStr := stat.getSysInfo()
	deviceLinkingCountStr = strings.Replace(deviceLinkingCountStr, "\n", "", -1)
	deviceLinkingCountStr = strings.Trim(deviceLinkingCountStr, " ")
	deviceLinkingCountInt, err := strconv.ParseInt(deviceLinkingCountStr, 10, 64)
	if err != nil {
		log.Println("deviceLinkingCountInt Stdout:", err.Error())
	}
	log.Println(deviceLinkingCountInt)

	command := "sar -b 1 1|sed -n '4p'|awk '{print $(NF-1)}'"
	discReadFloat = commandStringHandle(command, stat)
	discReadFloat = discReadFloat / 2

	command = "sar -b 1 1|sed -n '4p'|awk '{print $(NF)}'"
	discWriteFloat = commandStringHandle(command, stat)
	discWriteFloat = discWriteFloat / 2

	command = "sar -b 1 1|sed -n '$p'|awk '{print $3}'"
	iopsReadFloat = commandStringHandle(command, stat)

	command = "sar -b 1 1|sed -n '$p'|awk '{print $4}'"
	iopsWriteFloat = commandStringHandle(command, stat)

	networkCard := conf.NetworkName
	networkCard = strings.Replace(networkCard, "\n", "", -1)
	log.Println(networkCard)

	stat.Commandline = fmt.Sprintf("sar -n DEV 1 1 |grep -i %s |sed -n '1p'|awk '{print $6}'", networkCard)
	bandwidthDownloadStr := stat.getSysInfo()
	bandwidthDownloadStr = strings.Replace(bandwidthDownloadStr, "\n", "", -1)
	bandwidthDownloadStr = strings.Trim(bandwidthDownloadStr, " ")
	bandwidthDownload, err = strconv.ParseFloat(bandwidthDownloadStr, 64)

	stat.Commandline = fmt.Sprintf("sar -n DEV 1 1 |grep -i %s |sed -n '1p'|awk '{print $7}'", networkCard)
	bandwidthUploadStr := stat.getSysInfo()
	bandwidthUploadStr = strings.Replace(bandwidthUploadStr, "\n", "", -1)
	bandwidthUploadStr = strings.Trim(bandwidthUploadStr, " ")
	bandwidthUpload, _ = strconv.ParseFloat(bandwidthUploadStr, 64)

	stat.Commandline = "df -P -h|awk '{print $1,$2,$(NF-1)}'|sed '1d'|grep '/.*'"
	diskStr := strings.TrimSpace(stat.getSysInfo())
	var diskStatSlice []string
	var diskName string
	var discInfo DiskInfo
	piontDisc := &discInfo
	var diskTotalFloat float64
	var discInfoList []DiskInfo
	diskStr = strings.Replace(diskStr, "\n", ",", -1)
	diskStatSlice = strings.Split(diskStr, ",")
	for _, diskStat_dev := range diskStatSlice {
		diskName = strings.Split(diskStat_dev, " ")[0]
		if strings.Contains(diskName, ".") {
			diskName = strings.Replace(diskName, ".", "_", -1)
		}
		diskTotal := strings.Split(diskStat_dev, " ")[1]
		if strings.Contains(diskTotal, "T") == true {
			diskTotal = diskTotal[0 : len(diskTotal)-1]
			diskTotalFloat, _ = strconv.ParseFloat(diskTotal, 32)
			diskTotalFloat = diskTotalFloat * 1024
		} else if strings.Contains(diskTotal, "M") == true {
			diskTotal = diskTotal[0 : len(diskTotal)-1]
			diskTotalFloat, _ = strconv.ParseFloat(diskTotal, 32)
			diskTotalFloat = diskTotalFloat / 1024
			diskTotalFloat, _ = strconv.ParseFloat(fmt.Sprintf("%.2f", diskTotalFloat), 64)
		} else {
			diskTotal = diskTotal[0 : len(diskTotal)-1]
			diskTotalFloat, _ = strconv.ParseFloat(diskTotal, 32)
		}
		diskContent := strings.Split(diskStat_dev, " ")[2]
		diskContent = diskContent[0 : len(diskContent)-1]
		diskContentFloat, _ := strconv.ParseFloat(diskContent, 32)
		piontDisc.DiscName = diskName
		piontDisc.Total = diskTotalFloat
		piontDisc.UsageRate = diskContentFloat
		discInfoList = append(discInfoList, discInfo)
	}

	resourceInfo = serverStatJson(discInfoList, deviceLinkingCountInt, discReadFloat, discWriteFloat, memoryUsageRateFloat2, cpuUsageRate, load, bandwidthUpload, bandwidthDownload, iopsReadFloat, iopsWriteFloat)
	resourceInfoRes, statusCode := exporter.Post(resourceInfo)
	log.Println(time.Now().String())
	log.Println(resourceInfoRes, statusCode)
	log.Println(resourceInfo)
	time.Sleep(time.Duration(60) * time.Second)
	return
}

func serverStatJson(discInfoList []DiskInfo, deviceLinkingCountInt int64, numbers ...float64) string {
	serverStatItem := ServerStatItem{MachineId: DiscInfoList: discInfoList, DeviceLinkingCountInt: deviceLinkingCountInt, DiscReadFloat: numbers[0], DiscWriteFloat: numbers[1], MemoryUsageRate: numbers[2], CpuUsageRate: numbers[3], Load: numbers[4], BandwidthUpload: numbers[5], BandwidthDownload: numbers[6], IopsRead: numbers[7], IopsWrite: numbers[8]}
	postItemJson, err := json.Marshal(serverStatItem)
	postItemStr := string(postItemJson)
	if err != nil {
		log.Println(err)
	}
	log.Println(postItemStr)
	return postItemStr
}

func main()  {

	for {
		

		conn, err := grpc.Dial(address, grpc.WithInsecure())
		if err != nil {
			log.Fatal(err)
		}
		defer conn.Close()
		client := pb.NewHelloClient(conn)
		
		name := defaultName
		if len(os.Args) > 1 {
			name = os.Args[1]
		}
		request, err := client.SayHello(context.Background(), &pb.HelloRequest{Name: name})
		if err != nil {
			log.Fatal(err)
		}
		fmt.Println(request.Message)
		time.Sleep(time.Duration(90) * time.Second)
	}
}

